
(function() {if("onhashchange" in window) {return;}var location = window.location,oldURL = location.href,oldHash = location.hash; setInterval(function() {var newURL = location.href,newHash = location.hash; if(newHash != oldHash && typeof window.onhashchange === "function") {window.onhashchange({type: "hashchange",oldURL: oldURL,newURL: newURL}); oldURL = newURL; oldHash = newHash;}},500);})();  window.hashchange_handler = {};
hashchange_handler.debug = false;
hashchange_handler.defaults = {
  "#login": {
    page_type: "Mobile",
    page_class: "Log In or One-Time Access",
    page_name: "login",
    page_title: "Log In or One-Time Access",
    page_title_sub: "Log In"
  },
  "#otaaccount/carefera/enroll/": {
    page_type: "Mobile",
    page_class: "CARE-FERA Enrollment",
    page_name: "otaaccount/carefera/enroll",
    page_title: "CARE/FERA",
    page_title_sub: "Enroll in CARE/FERA"
  },
  "#otaaccount/carefera/thankyou": {
    page_type: "Mobile",
    page_class: "CARE-FERA Thank You",
    page_name: "otaaccount/carefera/thankyou",
    page_title: "CARE/FERA",
    page_title_sub: "CARE/FERA Thank You"
  },
  "#myaccount/carefera/enroll/": {
    page_type: "Mobile",
    page_class: "CARE-FERA Enrollment",
    page_name: "myaccount/carefera/enroll",
    page_title: "CARE/FERA",
    page_title_sub: "Enroll in CARE/FERA"
  },
  "#myaccount/carefera/thankyou": {
    page_type: "Mobile",
    page_class: "CARE-FERA Thank You",
    page_name: "otaaccount/carefera/thankyou",
    page_title: "CARE/FERA",
    page_title_sub: "CARE/FERA Thank You"
  }
};

hashchange_handler.parseURI = function(str) {var o = {strictMode: false,key: ["src","protocol","auth","userInfo","user","pass","host","port","relative","path","directory","file","query","anchor"],q: {name: "query_key",parser: /(?:^|&)([^&=]*)=?([^&]*)/g},parser: {strict: /^(?:([^:\/?#]+):)?(?:\/\/((?:(([^:@]*)(?::([^:@]*))?)?@)?([^:\/?#]*)(?::(\d*))?))?((((?:[^?#\/]*\/)*)([^?#]*))(?:\?([^#]*))?(?:#(.*))?)/,loose: /^(?:(?![^:@]+:[^:@\/]*@)([^:\/?#.]+):)?(?:\/\/)?((?:(([^:@]*)(?::([^:@]*))?)?@)?([^:\/?#]*)(?::(\d*))?)(((\/(?:[^?#](?![^?#\/]*\.[^?#\/.]+(?:[?#]|$)))*\/?)?([^?#\/]*))(?:\?([^#]*))?(?:#(.*))?)/}},m = o.parser[o.strictMode ? "strict" : "loose"].exec(str),uri = {},i = 14; while(i--) {uri[o.key[i]] = m[i] || "";}uri[o.q.name] = {}; uri[o.key[12]].replace(o.q.parser,function($0,$1,$2) {if($1) {uri[o.q.name][$1] = $2;}}); return uri;};
hashchange_handler.udo_builder = function(init,additional) {function kindof(data) {var data_type = Object.prototype.toString.call(data).match(/\s([a-zA-Z]+)/)[1].toLowerCase().replace(/^html|element/gim,""); switch(data_type) {case"number":return isNaN(data) ? "nan" : "number"; default:return data_type;}}function map_data(source,target) {source = kindof(source) === "object" ? source : {}; target = kindof(target) === "object" ? target : {}; if(Object.keys) {Object.keys(source).forEach(function(key,i) {target[key] = source[key];});}else{for(var key in source) {if(source.hasOwnProperty(key)) {target[key] = source[key];}}}return target;}var udo = {"dom.url": document.URL}; var config = hashchange_handler.defaults || {}; var init_type = kindof(init); if(init_type === "string" && config[init]) {map_data(config[init],udo);}else if(init_type === "object") {map_data(init,udo);}if(kindof(additional) === "object") {map_data(additional,udo);}return udo;};
hashchange_handler.queue = [];
hashchange_handler.dispatch = function(event) {var self = hashchange_handler; if(self.queue.indexOf(event.oldURL) > -1 || self.queue.indexOf(document.URL) > -1) {return;}self.queue.push(event.oldURL); self.queue.push(document.URL); if(!window.utag && !window.utag.view) {return;}if(window.document.querySelectorAll) {Array.prototype.forEach.call(document.querySelectorAll('[id*="utag_"]'),function(tag) {if(self.debug && utag.DB) {utag.DB("removing old tags");}tag.parentNode.removeChild(tag);});}var tracking_data = {}; var curr_path = self.parseURI(document.URL).path; var ref_path = self.parseURI(document.referrer).path; for(var key in self.defaults) {if(self.defaults.hasOwnProperty(key) && event.newURL.indexOf(key) > -1) {try{tracking_data = self.udo_builder(self.defaults[key]); tracking_data = self.udo_builder(tracking_data); utag.view(tracking_data); return;}catch(e) {}}}};
hashchange_handler.debug = false;

if (hashchange_handler.queue.indexOf(document.URL) === -1) {
  window.addEventListener("hashchange", hashchange_handler.dispatch);
}
